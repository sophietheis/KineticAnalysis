import numpy as np

def load_full_image_from_hdf5(hdf5_file, quality='1'):
    """ Load all time point images with a specific quality 
    """
    img = np.array([])
    for k in h5_file.keys():
        
        if k[0] == 't':
            sub_img = np.array(h5_file.get(k)['s00'][quality]['cells'])
            if img.shape[0]==0:
                img = np.array([sub_img])
            else:
                img = np.append(img, np.array([sub_img]), axis=0) 
    return img
            
            

def read_affine_transform(xml):
    """ Read affine transform matrix from xml file.
    """
    transform_matrix = np.array([])
    tree = ET.ElementTree(file=xml)
    
    for registration in tree.find('ViewRegistrations').iter():
#         if registration.tag == "ViewRegistration":
#             print(registration.attrib)
        if registration.tag == "Name" :
            name = registration.text
        elif registration.tag == "affine":
            if name == "AffineModel3D regularized with an RigidModel3D, lambda = 0.1":
#             if name == "AffineModel3D":
                transformation = registration.text.split()
                transformation = [float(transfo) for transfo in transformation]

                matrix = np.zeros((4, 4))
                matrix[0, :] = transformation[0:4]
                matrix[1, :] = transformation[4:8]
                matrix[2, :] = transformation[8:12]
                matrix[3, 3] = 1
                
                if transform_matrix.shape[0]==0:
                    transform_matrix = np.array([matrix])
                else:
                    transform_matrix = np.append(transform_matrix, np.array([matrix]), axis=0)
    return transform_matrix
    

def apply_affine_transform(image, transform_matrix):
    image_align = np.array([])
    for t in range(image.shape[0]):
        if t%10==0:
            print(t)
        _align = ndimage.affine_transform(image[t], transform_matrix[t])
        if image_align.shape[0]==0:
            image_align = np.array([_align])
        else:
            image_align = np.append(image_align, np.array([_align]), axis=0) 
    return image_align